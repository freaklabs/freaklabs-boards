
optiboot_atmega328_pro_8MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00008018  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000028c  2**0
                  CONTENTS, READONLY
  3 .comment      00000011  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000464  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000226  00000000  00000000  0000072b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018d  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000184  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c7  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e06:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    7e08:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e0a:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    7e0c:	98 2f       	mov	r25, r24
    7e0e:	9d 70       	andi	r25, 0x0D	; 13
    7e10:	11 f0       	breq	.+4      	; 0x7e16 <main+0x16>
      appStart(ch);
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	f9 d0       	rcall	.+498    	; 0x8008 <appStart>
    7e16:	85 e0       	ldi	r24, 0x05	; 5

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e18:	80 93 81 00 	sts	0x0081, r24
    7e1c:	82 e0       	ldi	r24, 0x02	; 2
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7e1e:	80 93 c0 00 	sts	0x00C0, r24
    7e22:	88 e1       	ldi	r24, 0x18	; 24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7e24:	80 93 c1 00 	sts	0x00C1, r24
    7e28:	96 e0       	ldi	r25, 0x06	; 6
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7e2a:	90 93 c2 00 	sts	0x00C2, r25
    7e2e:	98 e0       	ldi	r25, 0x08	; 8
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e30:	90 93 c4 00 	sts	0x00C4, r25
    7e34:	80 93 60 00 	sts	0x0060, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e38:	8e e0       	ldi	r24, 0x0E	; 14
  WDTCSR = x;
    7e3a:	80 93 60 00 	sts	0x0060, r24
    7e3e:	25 9a       	sbi	0x04, 5	; 4

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e40:	26 e0       	ldi	r18, 0x06	; 6
    7e42:	88 e1       	ldi	r24, 0x18	; 24
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e44:	9e ef       	ldi	r25, 0xFE	; 254
    7e46:	31 e0       	ldi	r19, 0x01	; 1
    TIFR1 = _BV(TOV1);
    7e48:	90 93 85 00 	sts	0x0085, r25
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e4c:	80 93 84 00 	sts	0x0084, r24
    7e50:	36 bb       	out	0x16, r19	; 22
    TIFR1 = _BV(TOV1);
    7e52:	b0 9b       	sbis	0x16, 0	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e54:	fe cf       	rjmp	.-4      	; 0x7e52 <main+0x52>
    7e56:	1d 9a       	sbi	0x03, 5	; 3
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e58:	a8 95       	wdr
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e5a:	21 50       	subi	r18, 0x01	; 1
    7e5c:	a9 f7       	brne	.-22     	; 0x7e48 <main+0x48>
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e5e:	61 2c       	mov	r6, r1
    7e60:	71 2c       	mov	r7, r1
    7e62:	98 e1       	ldi	r25, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e64:	e9 2e       	mov	r14, r25
    7e66:	28 e0       	ldi	r18, 0x08	; 8
  WDTCSR = x;
    7e68:	d2 2e       	mov	r13, r18
    7e6a:	33 e0       	ldi	r19, 0x03	; 3
      getch();			/* getlen() */
      length = getch();
      getch();

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7e6c:	f3 2e       	mov	r15, r19
    7e6e:	cc 24       	eor	r12, r12
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e70:	c3 94       	inc	r12
    7e72:	45 e0       	ldi	r20, 0x05	; 5
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e74:	b4 2e       	mov	r11, r20
    7e76:	51 e1       	ldi	r21, 0x11	; 17
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e78:	a5 2e       	mov	r10, r21
    7e7a:	a1 d0       	rcall	.+322    	; 0x7fbe <getch>
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e7c:	81 34       	cpi	r24, 0x41	; 65
    7e7e:	79 f4       	brne	.+30     	; 0x7e9e <main+0x9e>

    if(ch == STK_GET_PARAMETER) {
    7e80:	9e d0       	rcall	.+316    	; 0x7fbe <getch>
    7e82:	89 83       	std	Y+1, r24	; 0x01
      unsigned char which = getch();
    7e84:	a8 d0       	rcall	.+336    	; 0x7fd6 <verifySpace>
    7e86:	89 81       	ldd	r24, Y+1	; 0x01
      verifySpace();
    7e88:	82 38       	cpi	r24, 0x82	; 130
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <main+0x90>
    7e8c:	85 e0       	ldi	r24, 0x05	; 5
      if (which == 0x82) {
    7e8e:	05 c0       	rjmp	.+10     	; 0x7e9a <main+0x9a>
    7e90:	81 38       	cpi	r24, 0x81	; 129
    7e92:	11 f4       	brne	.+4      	; 0x7e98 <main+0x98>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    7e94:	84 e0       	ldi	r24, 0x04	; 4
    7e96:	01 c0       	rjmp	.+2      	; 0x7e9a <main+0x9a>
      } else if (which == 0x81) {
    7e98:	83 e0       	ldi	r24, 0x03	; 3
    7e9a:	8a d0       	rcall	.+276    	; 0x7fb0 <putch>
	  putch(OPTIBOOT_MAJVER);
    7e9c:	86 c0       	rjmp	.+268    	; 0x7faa <main+0x1aa>
    7e9e:	82 34       	cpi	r24, 0x42	; 66
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7ea0:	11 f4       	brne	.+4      	; 0x7ea6 <main+0xa6>
    7ea2:	84 e1       	ldi	r24, 0x14	; 20
    7ea4:	03 c0       	rjmp	.+6      	; 0x7eac <main+0xac>
    7ea6:	85 34       	cpi	r24, 0x45	; 69
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7ea8:	19 f4       	brne	.+6      	; 0x7eb0 <main+0xb0>
    7eaa:	85 e0       	ldi	r24, 0x05	; 5
      // SET DEVICE is ignored
      getNch(20);
    7eac:	a0 d0       	rcall	.+320    	; 0x7fee <getNch>
    7eae:	7d c0       	rjmp	.+250    	; 0x7faa <main+0x1aa>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7eb0:	85 35       	cpi	r24, 0x55	; 85
    7eb2:	41 f4       	brne	.+16     	; 0x7ec4 <main+0xc4>
      // SET DEVICE EXT is ignored
      getNch(5);
    7eb4:	84 d0       	rcall	.+264    	; 0x7fbe <getch>
    7eb6:	68 2e       	mov	r6, r24
    7eb8:	82 d0       	rcall	.+260    	; 0x7fbe <getch>
    7eba:	71 2c       	mov	r7, r1
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7ebc:	78 2a       	or	r7, r24
    7ebe:	66 0c       	add	r6, r6
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7ec0:	77 1c       	adc	r7, r7
    7ec2:	72 c0       	rjmp	.+228    	; 0x7fa8 <main+0x1a8>
    7ec4:	86 35       	cpi	r24, 0x56	; 86
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ec6:	21 f4       	brne	.+8      	; 0x7ed0 <main+0xd0>
    7ec8:	84 e0       	ldi	r24, 0x04	; 4
    7eca:	91 d0       	rcall	.+290    	; 0x7fee <getNch>
    7ecc:	80 e0       	ldi	r24, 0x00	; 0
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7ece:	e5 cf       	rjmp	.-54     	; 0x7e9a <main+0x9a>
    7ed0:	84 36       	cpi	r24, 0x64	; 100
    7ed2:	09 f0       	breq	.+2      	; 0x7ed6 <main+0xd6>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7ed4:	40 c0       	rjmp	.+128    	; 0x7f56 <main+0x156>
    7ed6:	73 d0       	rcall	.+230    	; 0x7fbe <getch>
      // UNIVERSAL command is ignored
      getNch(4);
    7ed8:	72 d0       	rcall	.+228    	; 0x7fbe <getch>
    7eda:	98 2e       	mov	r9, r24
    7edc:	70 d0       	rcall	.+224    	; 0x7fbe <getch>
      putch(0x00);
    7ede:	61 14       	cp	r6, r1
    7ee0:	80 e7       	ldi	r24, 0x70	; 112
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ee2:	78 06       	cpc	r7, r24
    7ee4:	18 f0       	brcs	.+6      	; 0x7eec <main+0xec>
    7ee6:	00 e0       	ldi	r16, 0x00	; 0
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7ee8:	11 e0       	ldi	r17, 0x01	; 1
    7eea:	04 c0       	rjmp	.+8      	; 0x7ef4 <main+0xf4>
      length = getch();
    7eec:	f3 01       	movw	r30, r6
    7eee:	f7 be       	out	0x37, r15	; 55
    7ef0:	e8 95       	spm
      getch();
    7ef2:	f9 cf       	rjmp	.-14     	; 0x7ee6 <main+0xe6>
    7ef4:	64 d0       	rcall	.+200    	; 0x7fbe <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ef6:	f8 01       	movw	r30, r16
    7ef8:	81 93       	st	Z+, r24
    7efa:	8f 01       	movw	r16, r30
    7efc:	9e 12       	cpse	r9, r30
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7efe:	fa cf       	rjmp	.-12     	; 0x7ef4 <main+0xf4>
    7f00:	61 14       	cp	r6, r1
    7f02:	f0 e7       	ldi	r31, 0x70	; 112
      getch();			/* getlen() */
      length = getch();
      getch();

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7f04:	7f 06       	cpc	r7, r31
    7f06:	18 f0       	brcs	.+6      	; 0x7f0e <main+0x10e>
    7f08:	f3 01       	movw	r30, r6
    7f0a:	f7 be       	out	0x37, r15	; 55

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7f0c:	e8 95       	spm
    7f0e:	63 d0       	rcall	.+198    	; 0x7fd6 <verifySpace>
    7f10:	07 b6       	in	r0, 0x37	; 55
    7f12:	00 fc       	sbrc	r0, 0
    7f14:	fd cf       	rjmp	.-6      	; 0x7f10 <main+0x110>
      while (--length);
    7f16:	a3 01       	movw	r20, r6
    7f18:	a0 e0       	ldi	r26, 0x00	; 0

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7f1a:	b1 e0       	ldi	r27, 0x01	; 1
    7f1c:	8c 91       	ld	r24, X
    7f1e:	12 96       	adiw	r26, 0x02	; 2
    7f20:	9d 01       	movw	r18, r26
    7f22:	21 50       	subi	r18, 0x01	; 1
    7f24:	31 09       	sbc	r19, r1
    7f26:	f9 01       	movw	r30, r18

      // Read command terminator, start reply
      verifySpace();
    7f28:	20 81       	ld	r18, Z
    7f2a:	90 e0       	ldi	r25, 0x00	; 0

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7f2c:	92 2b       	or	r25, r18
    7f2e:	fa 01       	movw	r30, r20
    7f30:	0c 01       	movw	r0, r24
    7f32:	c7 be       	out	0x37, r12	; 55
    7f34:	e8 95       	spm
    7f36:	11 24       	eor	r1, r1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7f38:	4e 5f       	subi	r20, 0xFE	; 254
    7f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    7f3c:	a0 38       	cpi	r26, 0x80	; 128
    7f3e:	f1 e0       	ldi	r31, 0x01	; 1
    7f40:	bf 07       	cpc	r27, r31
        a |= (*bufPtr++) << 8;
    7f42:	61 f7       	brne	.-40     	; 0x7f1c <main+0x11c>
    7f44:	f3 01       	movw	r30, r6
    7f46:	b7 be       	out	0x37, r11	; 55
    7f48:	e8 95       	spm
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f4a:	07 b6       	in	r0, 0x37	; 55
    7f4c:	00 fc       	sbrc	r0, 0
    7f4e:	fd cf       	rjmp	.-6      	; 0x7f4a <main+0x14a>
    7f50:	a7 be       	out	0x37, r10	; 55
    7f52:	e8 95       	spm
        addrPtr += 2;
    7f54:	2a c0       	rjmp	.+84     	; 0x7faa <main+0x1aa>
    7f56:	84 37       	cpi	r24, 0x74	; 116
      } while (--ch);
    7f58:	c1 f4       	brne	.+48     	; 0x7f8a <main+0x18a>
    7f5a:	31 d0       	rcall	.+98     	; 0x7fbe <getch>
    7f5c:	30 d0       	rcall	.+96     	; 0x7fbe <getch>
    7f5e:	98 2e       	mov	r9, r24

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7f60:	2e d0       	rcall	.+92     	; 0x7fbe <getch>
    7f62:	39 d0       	rcall	.+114    	; 0x7fd6 <verifySpace>
    7f64:	f3 01       	movw	r30, r6
      boot_spm_busy_wait();
    7f66:	86 2c       	mov	r8, r6
    7f68:	89 0c       	add	r8, r9
    7f6a:	8f 01       	movw	r16, r30

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7f6c:	0f 5f       	subi	r16, 0xFF	; 255
    7f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7f70:	84 91       	lpm	r24, Z
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f72:	1e d0       	rcall	.+60     	; 0x7fb0 <putch>
    7f74:	80 12       	cpse	r8, r16
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    7f76:	07 c0       	rjmp	.+14     	; 0x7f86 <main+0x186>
    7f78:	ff ef       	ldi	r31, 0xFF	; 255
      length = getch();
    7f7a:	6f 1a       	sub	r6, r31
    7f7c:	7f 0a       	sbc	r7, r31
    7f7e:	9a 94       	dec	r9
      getch();
    7f80:	69 0c       	add	r6, r9
    7f82:	71 1c       	adc	r7, r1

      verifySpace();
    7f84:	12 c0       	rjmp	.+36     	; 0x7faa <main+0x1aa>
    7f86:	f8 01       	movw	r30, r16
    7f88:	f0 cf       	rjmp	.-32     	; 0x7f6a <main+0x16a>
    7f8a:	85 37       	cpi	r24, 0x75	; 117
    7f8c:	39 f4       	brne	.+14     	; 0x7f9c <main+0x19c>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7f8e:	23 d0       	rcall	.+70     	; 0x7fd6 <verifySpace>
    7f90:	8e e1       	ldi	r24, 0x1E	; 30
    7f92:	0e d0       	rcall	.+28     	; 0x7fb0 <putch>
    7f94:	85 e9       	ldi	r24, 0x95	; 149
    7f96:	0c d0       	rcall	.+24     	; 0x7fb0 <putch>
    7f98:	8f e0       	ldi	r24, 0x0F	; 15
      while (--length);
    7f9a:	7f cf       	rjmp	.-258    	; 0x7e9a <main+0x9a>
    7f9c:	81 35       	cpi	r24, 0x51	; 81
    7f9e:	21 f4       	brne	.+8      	; 0x7fa8 <main+0x1a8>
    7fa0:	e0 92 60 00 	sts	0x0060, r14
    7fa4:	d0 92 60 00 	sts	0x0060, r13
    7fa8:	16 d0       	rcall	.+44     	; 0x7fd6 <verifySpace>
    7faa:	80 e1       	ldi	r24, 0x10	; 16
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7fac:	01 d0       	rcall	.+2      	; 0x7fb0 <putch>
    7fae:	65 cf       	rjmp	.-310    	; 0x7e7a <main+0x7a>

00007fb0 <putch>:
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7fb0:	90 91 c0 00 	lds	r25, 0x00C0
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7fb4:	95 ff       	sbrs	r25, 5
    7fb6:	fc cf       	rjmp	.-8      	; 0x7fb0 <putch>
      putch(SIGNATURE_0);
    7fb8:	80 93 c6 00 	sts	0x00C6, r24
    7fbc:	08 95       	ret

00007fbe <getch>:
      putch(SIGNATURE_1);
    7fbe:	80 91 c0 00 	lds	r24, 0x00C0
    7fc2:	87 ff       	sbrs	r24, 7
      putch(SIGNATURE_2);
    7fc4:	fc cf       	rjmp	.-8      	; 0x7fbe <getch>
    7fc6:	80 91 c0 00 	lds	r24, 0x00C0
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7fca:	84 fd       	sbrc	r24, 4
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fcc:	01 c0       	rjmp	.+2      	; 0x7fd0 <getch+0x12>
    7fce:	a8 95       	wdr
  WDTCSR = x;
    7fd0:	80 91 c6 00 	lds	r24, 0x00C6
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7fd4:	08 95       	ret

00007fd6 <verifySpace>:
    7fd6:	f3 df       	rcall	.-26     	; 0x7fbe <getch>
    }
    putch(STK_OK);
    7fd8:	80 32       	cpi	r24, 0x20	; 32
    7fda:	39 f0       	breq	.+14     	; 0x7fea <verifySpace+0x14>
    7fdc:	88 e1       	ldi	r24, 0x18	; 24
  }
    7fde:	80 93 60 00 	sts	0x0060, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fe2:	88 e0       	ldi	r24, 0x08	; 8
  WDTCSR = x;
    7fe4:	80 93 60 00 	sts	0x0060, r24
    7fe8:	ff cf       	rjmp	.-2      	; 0x7fe8 <verifySpace+0x12>
    7fea:	84 e1       	ldi	r24, 0x14	; 20
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fec:	e1 cf       	rjmp	.-62     	; 0x7fb0 <putch>

00007fee <getNch>:
    7fee:	cf 93       	push	r28
    7ff0:	c8 2f       	mov	r28, r24
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7ff2:	e5 df       	rcall	.-54     	; 0x7fbe <getch>
    7ff4:	c1 50       	subi	r28, 0x01	; 1
  do getch(); while (--count);
    7ff6:	e9 f7       	brne	.-6      	; 0x7ff2 <getNch+0x4>
    7ff8:	cf 91       	pop	r28
    7ffa:	ed cf       	rjmp	.-38     	; 0x7fd6 <verifySpace>

00007ffc <watchdogConfig>:
    7ffc:	e0 e6       	ldi	r30, 0x60	; 96
  verifySpace();
}
    7ffe:	f0 e0       	ldi	r31, 0x00	; 0
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    8000:	98 e1       	ldi	r25, 0x18	; 24
    8002:	90 83       	st	Z, r25
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    8004:	80 83       	st	Z, r24
    8006:	08 95       	ret

00008008 <appStart>:
    8008:	e0 e6       	ldi	r30, 0x60	; 96
    800a:	f0 e0       	ldi	r31, 0x00	; 0
  WDTCSR = x;
    800c:	88 e1       	ldi	r24, 0x18	; 24
    800e:	80 83       	st	Z, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    8010:	10 82       	st	Z, r1
    8012:	ee 27       	eor	r30, r30
    8014:	ff 27       	eor	r31, r31
    8016:	09 94       	ijmp
